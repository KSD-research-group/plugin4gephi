/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package graphml.architecture.history;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.gephi.project.api.Project;
import org.gephi.project.api.ProjectController;
import org.gephi.project.api.ProjectInformation;
import org.openide.util.Lookup;

/**
 * This class represents the HistoryManager-UI
 * (Parts of this class are generated automatically by NetBeans and therewith don't contain Javadoc-Code)
 * @author Thomas Stocker
 */
public class HistoryFrame extends javax.swing.JFrame {

    // attributes
    private static int id = 0;
    private String filename;
    private File oldFile;
    private String path;
    private DefaultTableModel model;
    private final ProjectController pc;
    private final String fileSeparator;


    /**
     * Constructor creates new form HistoryFrame
     */
    public HistoryFrame() {
        super();
        
        initComponents();
        this.setVisible(true);
        
        // setup
        pc = Lookup.getDefault().lookup(ProjectController.class);
        fileSeparator = System.getProperty("file.separator");
        
        // init the project
        initProject();
        
        // load history from previous savings
        loadHistory();
        
        // set closing operation
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                saveHistory();
                windowEvent.getWindow().dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bAddToHistory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOverview = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bClearHistory = new javax.swing.JButton();
        bLoadConfiguration = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.openide.awt.Mnemonics.setLocalizedText(bAddToHistory, org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.bAddToHistory.text")); // NOI18N
        bAddToHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddToHistoryActionPerformed(evt);
            }
        });

        tableOverview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Description", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableOverview);
        if (tableOverview.getColumnModel().getColumnCount() > 0) {
            tableOverview.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.tableOverview.columnModel.title0")); // NOI18N
            tableOverview.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.jTable1.columnModel.title3_1")); // NOI18N
            tableOverview.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.tableOverview.columnModel.title2")); // NOI18N
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bClearHistory, org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.bClearHistory.text")); // NOI18N
        bClearHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearHistoryActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bLoadConfiguration, org.openide.util.NbBundle.getMessage(HistoryFrame.class, "HistoryFrame.bLoadConfiguration.text")); // NOI18N
        bLoadConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadConfigurationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bAddToHistory)
                        .addGap(18, 18, 18)
                        .addComponent(bLoadConfiguration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bClearHistory)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAddToHistory)
                    .addComponent(bClearHistory)
                    .addComponent(bLoadConfiguration))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is executed, when the button "Add to History" is clicked
     * @param evt ActionEvent (unused)
     */
    private void bAddToHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddToHistoryActionPerformed
    
        //########################################
        // save gephi file
        //########################################
        
        // get path
        String filePath = path + fileSeparator + filename.substring(0, filename.length() - 6) + id + ".gephi";
        
        // create file
        File file = new File(filePath);
        file = file.getAbsoluteFile();
        if(!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                // show error
                JOptionPane.showMessageDialog(this, "HistoryFile could not be created.", "Error Handler", JOptionPane.ERROR_MESSAGE);                
                return;
            }
        }
        
        // save file
        Runnable saver = pc.saveProject(pc.getCurrentProject(), file);
        saver.run();
        
        // save as current project
        saver = pc.saveProject(pc.getCurrentProject(), oldFile);
        saver.run();
        
        //########################################
        // get attributes
        //########################################

        // get date
        Calendar cal = Calendar.getInstance();
        Date d = cal.getTime();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        String date = dateFormat.format(d);
        
        //########################################
        // add data into table
        //########################################
        model.addRow(new Object[]{id, "", date});
        
        id++;
    }//GEN-LAST:event_bAddToHistoryActionPerformed

    /**
     * This method is executed, when the "Clear History" button is pressed
     * @param evt ActionEvent (not used)
     */
    private void bClearHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearHistoryActionPerformed

        //########################################
        // remove all rows
        //########################################        
        int tempRows = model.getRowCount();
        for(int i = 0; i < tempRows; i++) {
            model.removeRow(0);
        }
        
        //########################################
        // delete files
        //########################################
        
        // delete all files until id (if existing)
        File f;
        for(int i = 0; i < id; i++) {
            f = new File(path + fileSeparator + filename.substring(0, filename.length() - 6) + i + ".gephi");
            if(f.exists() == true) {
                f.delete();
            }
        }
        
        //########################################
        // reset id
        //########################################        
        id = 0;        
    }//GEN-LAST:event_bClearHistoryActionPerformed

    /**
     * This method is executed, when the button "Load configuration" is pressed
     * @param evt ActionEvent (unused)
     */
    private void bLoadConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadConfigurationActionPerformed

        // get selected item
        int selectedRow = tableOverview.getSelectedRow();
        int tempId = (Integer) model.getValueAt(selectedRow, 0);
        
        // check if existing
        File f = new File(path + fileSeparator + filename.substring(0, filename.length() - 6) + tempId + ".gephi");
        if(!f.exists()) {
            JOptionPane.showMessageDialog(this, "HistoryFile could not be found and loaded.", "Error Handler", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // load file
        Runnable opener = pc.openProject(f);
        opener.run();
        
        // store file as previous
        Runnable saver = pc.saveProject(pc.getCurrentProject(), oldFile);
        saver.run();
    }//GEN-LAST:event_bLoadConfigurationActionPerformed

    /**
     * This method initially loads the history (if available) during GUI-startup
     */
    private void loadHistory() {
        //########################################
        // load history, if existing
        //######################################## 
        model = (DefaultTableModel) tableOverview.getModel();
        readFile();      
    }
 
    /**
     * This method continues the initial checkup by reading the logfile
     */
    private void readFile() {

        //########################################
        // read log-file
        //########################################
        
        // check if existing
        String logfilePath = path + fileSeparator + filename + ".log";
        File f = new File(logfilePath);
        
        if(!f.exists()) {
            // create file
            try {
                f.createNewFile();
            } catch (IOException ex) {
                // show error and close
                JOptionPane.showMessageDialog(this, "No writing rights in directory of project. Possibly run program as administrator.", "Error Handler", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
            // return in any case
            return;        
        }
        
        // check if can write to file
        if(!f.canWrite()) {
            JOptionPane.showMessageDialog(this, "No writing rights in directory of project. Possibly run program as administrator.", "Error Handler", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        }
        

        // read log file
        try {
            BufferedReader br = new BufferedReader(new FileReader(f));

            // maximum id
            String line = br.readLine();
            id = Integer.parseInt(line);

            int tempId;
            String tempDescription;
            String tempDate;
                   
            line = br.readLine();
            while(line != null) {
                // get id, description, date
                tempId = Integer.parseInt(line);
                tempDescription = br.readLine();
                tempDate = br.readLine();
                
                // only add, if file existing
                if(fileExisting(tempId) == true) {
                    // add to table
                    model.addRow(new Object[]{tempId, tempDescription, tempDate});
                }
                
                // get next element
                line = br.readLine();
            }
            
            br.close();
            
        } catch (FileNotFoundException ex) {
            // do nothing
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unknown error appeared.", "Error Handler", JOptionPane.ERROR_MESSAGE);     
        }
    }

    /**
     * This method is executed, when the window is closed. Then, the history needs to be saved.
     */
    private void saveHistory() {
        // set up file
        String logfilePath = path + fileSeparator + filename + ".log";
        File f = new File(logfilePath);
        if (!f.exists()) {
            try {
                f.createNewFile();
            } catch (IOException ex) {
                // do nothing
                return;
            }
        }
        
        // export file
        FileWriter fw;
        try {
            fw = new FileWriter(f.getAbsoluteFile(), false);
            BufferedWriter bw = new BufferedWriter(fw);
            
            // get data out of table
            bw.write(String.valueOf(id));

            for(int i = 0; i < model.getRowCount(); i++) {
                // id + description + date
                bw.newLine();
                bw.write(String.valueOf(model.getValueAt(i, 0)));
                bw.newLine();
                bw.write((String)(model.getValueAt(i, 1)));
                bw.newLine();
                bw.write((String)(model.getValueAt(i, 2)));
            }
            
            bw.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unknown error appeared.", "Error Handler", JOptionPane.ERROR_MESSAGE);     
        }    
    }

    /**
     * This method checks, if a file is existing
     * @param tempId the id of the file to be checked
     * @return the result, if the file with the given ID is existing
     */
    private boolean fileExisting(int tempId) {
        String filePath = path + fileSeparator + filename.substring(0, filename.length() - 6) + tempId + ".gephi";
        File f = new File(filePath);
        return f.exists();
    }

    /**
     * Initialize the project environment
     * set file-path and check on permission
     */
    private void initProject() {
        // variables
        Project project = pc.getCurrentProject();

        //########################################
        // check project
        //########################################     
        // check if project not existing
        if(project == null) {
            // show error and close
            JOptionPane.showMessageDialog(this, "Project could not be retrieved. Possibly open a new project to resolve this error.", "Error Handler", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        }        
        
        //########################################
        // check oldFile
        //########################################           
        oldFile = null;
        if(project.getLookup().lookup(ProjectInformation.class).hasFile()) {
            oldFile = project.getLookup().lookup(ProjectInformation.class).getFile();
        }
        // check if filename not existing
        if(oldFile == null) {
            // show error and close
            JOptionPane.showMessageDialog(this, "File could not be retrieved. Possibly save the file to resolve this error.", "Error Handler", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        }
        
        //########################################
        // set path and filename
        //######################################## 
        path = oldFile.getAbsolutePath();
        filename = oldFile.getName();
        
        // cut path with filename
        path = path.substring(0, path.length() - filename.length());

        
        jLabel1.setText("History Viewer for " + filename);
        
        //########################################
        // check writing rights
        //########################################          
        File tempFile = new File(path + "GephiHistory");
        tempFile = tempFile.getAbsoluteFile();
        
        //########################################
        // make temp directory
        //########################################          
        try {
            if(!tempFile.exists()) {
                tempFile.mkdir();
            }
        }
        // catch if cannot write
        catch(Exception e) {
            // show error and close
            JOptionPane.showMessageDialog(this, "No writing rights in directory of project. Possibly run program as administrator.", "Error Handler", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;        
        }
        
        path = tempFile.getAbsolutePath();       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddToHistory;
    private javax.swing.JButton bClearHistory;
    private javax.swing.JButton bLoadConfiguration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableOverview;
    // End of variables declaration//GEN-END:variables

}
