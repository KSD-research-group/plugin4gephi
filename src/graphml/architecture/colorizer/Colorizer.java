/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package graphml.architecture.colorizer;

import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import org.gephi.data.attributes.api.AttributeColumn;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.data.attributes.api.AttributeType;
import org.gephi.graph.api.Edge;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.Node;
import org.openide.util.Lookup;

/**
 * This class holds the Colorizer GUI
 * (Parts of this class are generated automatically by NetBeans and therewith don't contain Javadoc-Code)
 * @author Thomas Stocker
 */
public class Colorizer extends javax.swing.JFrame {
    
    // UI
    private final AttributeModel attrModel;
    private final GraphModel graphModel;
    private final DefaultListModel<String> attributeListModel = new DefaultListModel<String>();
    private final DefaultListModel<Color> colorListModel = new DefaultListModel<Color>();
    
    // TemplateList
    private final String[] templateNames = {"-", "RoomTemplate", "EnclosedRoomTemplate", "Reset"};

    // RoomTemplate
    private final String[] selectedItemRoom = { "Room", "Living", "Corridor", "Kitchen", "Toilet", "Sleeping", "Working", "Bath", "Outdoor", "Storage", "Parking"};
    private final Color[] correspondingColorRoom = {new Color(0x000000), new Color(0x00FF40), new Color(0x6E6E6E), new Color(0xFF0000), new Color(0x0040FF), new Color(0xF5DA81), new Color(0x0B0B61), new Color(0x2E2EFE), new Color(0x38610B), new Color(0xFFFF00), new Color(0x424242)};

    // EnclosedRoomTemplate
    private final String[] selectedItemEnclosedRoom = {"true", "false"}; 
    private final Color[] correspondingColorEnclosedRoom = {new Color(0x0000FF), new Color(0xFF4000)};

    /**
     * Constructor creates new form Colorizer
     */
    public Colorizer() {
        this.attrModel = Lookup.getDefault().lookup(AttributeController.class).getModel();
        this.graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();
        
        initComponents();
        
        // init dropdown
        AttributeColumn[] columns = attrModel.getNodeTable().getColumns();
        
        // get relevant columns
        int count = 0;
        for (AttributeColumn column : columns) {
            if (column.getType() == AttributeType.STRING || column.getType() == AttributeType.BOOLEAN) {
                count++;
            }
        }
        
        // add columns
        String[] s = new String[count];
        count = 0;
        for (AttributeColumn column : columns) {
            if (column.getType() == AttributeType.STRING || column.getType() == AttributeType.BOOLEAN) {
                s[count++] = column.getTitle();
            }
        }
        cbAttributeList.setModel(new DefaultComboBoxModel<String>(s));
        
        // add columns to template combobox
        cbTemplateList.setModel(new DefaultComboBoxModel<String>(templateNames));
        
        jList1.setModel(attributeListModel);
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jList1.setEnabled(false);
        listColors.setModel(colorListModel);
        listColors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listColors.setEnabled(true);
        listColors.setCellRenderer(new MyListCellRenderer());
        
        this.setVisible(true);
        cbAttributeListActionPerformed(null);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbAttributeList = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listColors = new javax.swing.JList<Color>();
        bColorize = new javax.swing.JButton();
        cbTemplateList = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cbAttributeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAttributeListActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Colorizer.class, "Colorizer.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Colorizer.class, "Colorizer.jLabel2.text")); // NOI18N

        jScrollPane1.setEnabled(false);

        jList1.setBackground(new java.awt.Color(234, 234, 234));
        jList1.setToolTipText(org.openide.util.NbBundle.getMessage(Colorizer.class, "Colorizer.jList1.toolTipText")); // NOI18N
        jList1.setEnabled(false);
        jScrollPane1.setViewportView(jList1);

        listColors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listColorsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listColors);

        org.openide.awt.Mnemonics.setLocalizedText(bColorize, org.openide.util.NbBundle.getMessage(Colorizer.class, "Colorizer.bColorize.text")); // NOI18N
        bColorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bColorizeActionPerformed(evt);
            }
        });

        cbTemplateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTemplateListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(cbAttributeList, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cbTemplateList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bColorize)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAttributeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTemplateList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bColorize)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method from ActionListener on cbAttributeList
     * @param evt ActionEvent (unused)
     */
    private void cbAttributeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAttributeListActionPerformed
        // go through all nodes and put values into combobox
        Node[] nodes = graphModel.getUndirectedGraph().getNodes().toArray();

        attributeListModel.clear();
        colorListModel.clear();
        
        // check if attribute is boolean
        if(checkIfColumnIsBoolean(cbAttributeList.getSelectedItem().toString()) == true) {
            // add true and false
            attributeListModel.addElement("true");
            attributeListModel.addElement("false");
            colorListModel.addElement(Color.BLACK);
            colorListModel.addElement(Color.BLACK);
        }
        else {
            // variable is string
            for(Node n : nodes) {
                if(n.getAttributes().getValue(cbAttributeList.getSelectedItem().toString()) != null) {
                    if(checkIfNotInListModel((String) n.getAttributes().getValue(cbAttributeList.getSelectedItem().toString()), attributeListModel)) {
                        attributeListModel.addElement((String) n.getAttributes().getValue(cbAttributeList.getSelectedItem().toString()));
                        colorListModel.addElement(Color.BLACK);
                    }
                }
            }
        }
    }//GEN-LAST:event_cbAttributeListActionPerformed

    /**
     * This method checks, if the given Column is boolean
     * @param chosenColumn name of the column
     * @return true if column is boolean, false otherwise
     */
    private boolean checkIfColumnIsBoolean(String chosenColumn) {
        AttributeColumn[] columns = attrModel.getNodeTable().getColumns();
        for (AttributeColumn column : columns) {
            if (column.getTitle().equals(chosenColumn)) {
                return column.getType() == AttributeType.BOOLEAN;
            }
        }
        return false;
    }

    /**
     * This method checks, if the given string is already added to the list model
     * @param s string to be compared
     * @param l listmodel to check wether string is in listModel
     * @return false if string is in ListModel, true if not
     */
    private static boolean checkIfNotInListModel(String s, ListModel<String> l) {
        for(int i = 0; i < l.getSize(); i++) {
            if(s.equals(l.getElementAt(i))) return false;
        }
        return true;
    }

    /**
     * Method that is invoked when the colorize button is clicked
     * @param evt ActionEvent (not used)
     */
    private void bColorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bColorizeActionPerformed
        
        // gehe durch alle nodes und färbe sie entsprechend
        Node[] nodes = graphModel.getUndirectedGraph().getNodes().toArray();
        String attrString;
        Object attrBool;
        Color c;
        
        boolean columnIsBoolean = checkIfColumnIsBoolean(cbAttributeList.getSelectedItem().toString());
        
        for(Node n : nodes) {
            // boolean
            if(columnIsBoolean == true) {
                attrBool = n.getAttributes().getValue(cbAttributeList.getSelectedItem().toString());
                
                if(attrBool == null || attrBool.toString().equals("false")) c = colorListModel.get(1);
                else c = colorListModel.get(0);
                n.getNodeData().setColor((float)(c.getRed() / 255.0), (float)(c.getGreen() / 255.0), (float)(c.getBlue() / 255.0));
            }            

            // string
            else {
                attrString = (String) n.getAttributes().getValue(cbAttributeList.getSelectedItem().toString());

                if(attrString == null) continue;

                for(int i = 0; i < attributeListModel.getSize(); i++) {
                    if(attrString.equals(attributeListModel.get(i))) {
                        c = colorListModel.get(i);
                        n.getNodeData().setColor((float)(c.getRed() / 255.0), (float)(c.getGreen() / 255.0), (float)(c.getBlue() / 255.0));
                        break;
                    }
                }
            }
        }
        
        // make edges black
        Edge[] edges = graphModel.getUndirectedGraph().getEdges().toArray();
        for(Edge e : edges) {
            e.getEdgeData().setColor(0, 0, 0);
        }
    }//GEN-LAST:event_bColorizeActionPerformed

    /**
     * Method that updates the colors in the right list, if double clicked on one
     * @param evt MouseEvent (from Click)
     */
    private void listColorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listColorsMouseClicked
        // get double click
         if(evt.getClickCount() == 2) {
             int index = listColors.getSelectedIndex();
             
             // get color
             Color c = JColorChooser.showDialog(this, "Please choose the color", listColors.getSelectedValue());
             
             colorListModel.set(index, c);
         }
    }//GEN-LAST:event_listColorsMouseClicked

    /**
     * Method that is invoked when the template combo box is changed
     * @param evt ActionEvent (not used) 
     */
    private void cbTemplateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTemplateListActionPerformed
        // get item
        String s = cbTemplateList.getSelectedItem().toString();
        
        if(s.equals(templateNames[1])) {
            // room template
            setColorFromTemplate(selectedItemRoom, correspondingColorRoom);
        }
        else if (s.equals(templateNames[2])) {
            // selected item template
            setColorFromTemplate(selectedItemEnclosedRoom, correspondingColorEnclosedRoom);
        }
        else if (s.equals(templateNames[3])) {
            // set all colors to black
            for(int i = 0; i < colorListModel.getSize(); i++) {
                colorListModel.set(i, Color.BLACK);
            }
        }
    }//GEN-LAST:event_cbTemplateListActionPerformed

    /**
     * This method sets the color selected in the template combo box
     * @param selectedItem list of items
     * @param correspondingColor list of colors
     */
    private void setColorFromTemplate(String[] selectedItem, Color[] correspondingColor) {
        int pos;

        // get through list1 and search for string
        for(int i = 0; i < attributeListModel.getSize(); i++) {
            pos = searchForPosition(attributeListModel.get(i), selectedItem);
            if(pos >= 0) {
                colorListModel.set(i, correspondingColor[pos]);
            }
        }
    }

    /**
     * Method searches the position of the given string
     * @param currentObject string to be checked
     * @param selectedItem Array to be searched in
     * @return the position in the string array (-1 if not existing)
     */
    private int searchForPosition(String currentObject, String[] selectedItem) {
        // go through list and search for attribute
        for(int i = 0; i < selectedItem.length; i++) {
            if(selectedItem[i].equals(currentObject)) return i;
        }
        // else return error
        return -1;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bColorize;
    private javax.swing.JComboBox<String> cbAttributeList;
    private javax.swing.JComboBox<String> cbTemplateList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Color> listColors;
    // End of variables declaration//GEN-END:variables

}
