/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphml.architecture.create;

import graphml.architecture.colorizer.Colorizer;
import graphml.architecture.colorizer.WeightManager;
import graphml.architecture.create.controller.Controller;
import graphml.architecture.history.HistoryFrame;
import javax.swing.JFrame;
import org.gephi.graph.api.Edge;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.Node;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//graphml.create//ArchitecturalGraphML//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ArchitecturalGraphMLTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rankingmode", openAtStartup = true)
@ActionID(category = "Window", id = "graphml.create.ArchitecturalGraphMLTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ArchitecturalGraphMLAction",
        preferredID = "ArchitecturalGraphMLTopComponent"
)
@Messages({
    "CTL_ArchitecturalGraphMLAction=Architecture-Plugin",
    "CTL_ArchitecturalGraphMLTopComponent=Architecture-Plugin",
    "HINT_ArchitecturalGraphMLTopComponent=This is the window of the architecture plugin"
})

/**
 * This class is a panel in the Gephi-Userinterface
 * (As this class is mostly generated automatically, not all code is commented)
 */
public final class ArchitecturalGraphMLTopComponent extends TopComponent {

    /**
     * default constructor
     */
    public ArchitecturalGraphMLTopComponent() {
        initComponents();
        setName(Bundle.CTL_ArchitecturalGraphMLTopComponent());
        setToolTipText(Bundle.HINT_ArchitecturalGraphMLTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bOpenColorizer = new javax.swing.JButton();
        bResetColors = new javax.swing.JButton();
        bOpenGraphCreator = new javax.swing.JButton();
        bWeightManager = new javax.swing.JButton();
        bHistoryManager = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bOpenColorizer, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bOpenColorizer.text")); // NOI18N
        bOpenColorizer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenColorizerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bResetColors, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bResetColors.text")); // NOI18N
        bResetColors.setToolTipText(org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bResetColors.toolTipText")); // NOI18N
        bResetColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResetColorsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bOpenGraphCreator, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bOpenGraphCreator.text")); // NOI18N
        bOpenGraphCreator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenGraphCreatorActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bWeightManager, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bWeightManager.text")); // NOI18N
        bWeightManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWeightManagerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bHistoryManager, org.openide.util.NbBundle.getMessage(ArchitecturalGraphMLTopComponent.class, "ArchitecturalGraphMLTopComponent.bHistoryManager.text")); // NOI18N
        bHistoryManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHistoryManagerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(bOpenGraphCreator)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bResetColors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bOpenColorizer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bWeightManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bHistoryManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(bOpenGraphCreator)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(bOpenColorizer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bResetColors)
                .addGap(23, 23, 23)
                .addComponent(bWeightManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bHistoryManager)
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Click on button "OpenColorizer"
     * @param evt ActionEvent
     */
    private void bOpenColorizerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenColorizerActionPerformed
        JFrame f = new Colorizer();
        f.setVisible(true);
    }//GEN-LAST:event_bOpenColorizerActionPerformed

    /**
     * Click on button "Reset Colors"
     * @param evt ActionEvent
     */
    private void bResetColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResetColorsActionPerformed
        GraphModel model = Lookup.getDefault().lookup(GraphController.class).getModel();
        
        // color all nodes black
        Node[] nodes = model.getUndirectedGraph().getNodes().toArray();
        for(Node n : nodes) {
            n.getNodeData().setColor(0, 0, 0);
        }
        
        // color all edges black
        Edge[] edges = model.getUndirectedGraph().getEdges().toArray();
        for(Edge e : edges) {
            e.getEdgeData().setColor(0, 0, 0);
        }
    }//GEN-LAST:event_bResetColorsActionPerformed

    /**
     * Click on button "Open Graph Creator"
     * @param evt ActionEvent
     */
    private void bOpenGraphCreatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenGraphCreatorActionPerformed
        new Controller();
    }//GEN-LAST:event_bOpenGraphCreatorActionPerformed

    /**
     * Click on button "Weight Manager"
     * @param evt ActionEvent
     */
    private void bWeightManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWeightManagerActionPerformed
        new WeightManager();
    }//GEN-LAST:event_bWeightManagerActionPerformed

    /**
     * Click on button "HistoryManager"
     * @param evt ActionEvent
     */
    private void bHistoryManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHistoryManagerActionPerformed
        new HistoryFrame();
    }//GEN-LAST:event_bHistoryManagerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bHistoryManager;
    private javax.swing.JButton bOpenColorizer;
    private javax.swing.JButton bOpenGraphCreator;
    private javax.swing.JButton bResetColors;
    private javax.swing.JButton bWeightManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Overrides method componentOpened() with empty method
     */
    @Override
    public void componentOpened() {
    }

    /**
     * Overrides method componentClosed() with empty method
     */
    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
}
